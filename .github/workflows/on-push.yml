name: Push Workflow
on: push

jobs:
    code-quality:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v3
              with:
                  registry-url: 'https://npm.pkg.github.com'
                  node-version: 18.0.0
                  cache: 'yarn'
            - name: Install
              run: yarn install
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_PAT }}
            - name: Lint
              run: yarn lint
            - name: Format
              run: yarn format:check

    build:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v3
              with:
                  registry-url: 'https://npm.pkg.github.com'
                  node-version: 18.0.0
                  cache: 'yarn'
            - name: Install
              run: yarn install
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_PAT }}
            - name: Build
              run: yarn build
            - uses: actions/upload-artifact@master
              with:
                  name: lib-builds
                  path: packages/lib/**/dist/
            - uses: actions/upload-artifact@master
              with:
                  name: lib-backend-builds
                  path: packages/lib/**/dist.backend/
            - uses: actions/upload-artifact@master
              with:
                  name: lib-schema
                  path: packages/lib/**/schema/
    backend-test:
        runs-on: ubuntu-latest
        needs: build
        defaults:
            run:
                working-directory: 'packages/lib'
        steps:
            - uses: actions/checkout@v1
            - id: workspace-test
              uses: ./test-action
              with:
                  workspace-name: 'dm3-backend'
                  package-pat: ${{ secrets.PACKAGE_PAT }}
    integration-test:
        runs-on: ubuntu-latest
        needs: build
        defaults:
            run:
                working-directory: 'packages/lib'
        steps:
            - uses: actions/checkout@v1
            - id: workspace-test
              uses: ./test-action
              with:
                  workspace-name: 'dm3-integration-tests'
                  package-pat: ${{ secrets.PACKAGE_PAT }}
    lib-crypto-test:
        runs-on: ubuntu-latest
        needs: build
        defaults:
            run:
                working-directory: 'packages/lib'
        steps:
            - uses: actions/checkout@v1
            - id: workspace-test
              uses: ./test-action
              with:
                  workspace-name: 'dm3-lib-crypto'
                  package-pat: ${{ secrets.PACKAGE_PAT }}
    lib-delivery-test:
        runs-on: ubuntu-latest
        needs: build
        defaults:
            run:
                working-directory: 'packages/lib'
        steps:
            - uses: actions/checkout@v1
            - id: workspace-test
              uses: ./test-action
              with:
                  workspace-name: 'dm3-lib-delivery'
                  package-pat: ${{ secrets.PACKAGE_PAT }}
    lib-messaging-test:
        runs-on: ubuntu-latest
        needs: build
        defaults:
            run:
                working-directory: 'packages/lib'
        steps:
            - uses: actions/checkout@v1
            - id: workspace-test
              uses: ./test-action
              with:
                  workspace-name: 'dm3-lib-messaging'
                  package-pat: ${{ secrets.PACKAGE_PAT }}
    lib-profile-test:
        runs-on: ubuntu-latest
        needs: build
        defaults:
            run:
                working-directory: 'packages/lib'
        steps:
            - uses: actions/checkout@v1
            - id: workspace-test
              uses: ./test-action
              with:
                  workspace-name: 'dm3-lib-profile'
                  package-pat: ${{ secrets.PACKAGE_PAT }}
    lib-shared-test:
        runs-on: ubuntu-latest
        needs: build
        defaults:
            run:
                working-directory: 'packages/lib'
        steps:
            - uses: actions/checkout@v1
            - id: workspace-test
              uses: ./test-action
              with:
                  workspace-name: 'dm3-lib-shared'
                  package-pat: ${{ secrets.PACKAGE_PAT }}
    lib-storage-test:
        runs-on: ubuntu-latest
        needs: build
        defaults:
            run:
                working-directory: 'packages/lib'
        steps:
            - uses: actions/checkout@v1
            - id: workspace-test
              uses: ./test-action
              with:
                  workspace-name: 'dm3-lib-storage'
                  package-pat: ${{ secrets.PACKAGE_PAT }}
    offchain-resolver-test:
        runs-on: ubuntu-latest
        needs: build
        defaults:
            run:
                working-directory: 'packages/lib'
        steps:
            - uses: actions/checkout@v1
            - id: workspace-test
              uses: ./test-action
              with:
                  workspace-name: 'dm3-offchain-resolver'
                  package-pat: ${{ secrets.PACKAGE_PAT }}
    messenger-demo-deploy:
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/new-ui'
        # needs:
        #     [
        #         offchain-resolver-test,
        #         lib-storage-test,
        #         lib-shared-test,
        #         lib-profile-test,
        #         lib-messaging-test,
        #         lib-delivery-test,
        #         lib-crypto-test,
        #         integration-test,
        #         backend-test,
        #         code-quality,
        #     ]
        steps:
            # Check-out your repository.
            - name: Checkout
              uses: actions/checkout@v2
            - name: Create env file
              run: |
                echo "REACT_APP_ADDR_ENS_SUBDOMAIN=.beta-addr.dm3.eth" >> ./packages/messenger-demo/.env
                echo "REACT_APP_BACKEND=https://dm3-beta2.herokuapp.com" >> ./packages/messenger-demo/.env
                echo "REACT_APP_DEFAULT_DELIVERY_SERVICE=beta-ds.dm3.eth" >> ./packages/messenger-demo/.env
                echo "REACT_APP_DEFAULT_SERVICE=https://dm3-beta2.herokuapp.com" >> ./packages/messenger-demo/.env
                echo "REACT_APP_ETHEREUM_PROVIDER=${{ secrets.REACT_APP_ETHEREUM_PROVIDER }}" >> ./packages/messenger-demo/.env
                echo "REACT_APP_PROFILE_BASE_URL=https://dm3-beta2-resolver.herokuapp.com" >> ./packages/messenger-demo/.env
                echo "REACT_APP_RESOLVER_BACKEND=https://dm3-beta2-resolver.herokuapp.com" >> ./packages/messenger-demo/.env
                echo "REACT_APP_USER_ENS_SUBDOMAIN=.beta-user.dm3.eth" >> ./packages/messenger-demo/.env
                echo "REACT_APP_WALLET_CONNECT_PROJECT_ID=${{ secrets.REACT_APP_WALLET_CONNECT_PROJECT_ID }}" >> ./packages/messenger-demo/.env
                echo "RESOLVER_ADDR=0x45F7Ed7d05c563D408898A80d9C705CC3328D2EF" >> ./packages/messenger-demo/.env
            - name: Build, Push and Release a Docker container to Heroku. # Your custom step name
              uses: gonuit/heroku-docker-deploy@v1.3.3 # GitHub action name (leave it as it is).
              with:
                  # Below you must provide variables for your Heroku app.

                  # The email address associated with your Heroku account.
                  # If you don't want to use repository secrets (which is recommended) you can do:
                  # email: my.email@example.com
                  email: ${{ secrets.HEROKU_EMAIL }}

                  # Heroku API key associated with provided user's email.
                  # Api Key is available under your Heroku account settings.
                  heroku_api_key: ${{ secrets.HEROKU_API_KEY }}

                  # Name of the heroku application to which the build is to be sent.
                  heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}

                  # (Optional, default: "./")
                  # Dockerfile directory.
                  # For example, if you have a Dockerfile in the root of your project, leave it as follows:
                  dockerfile_directory: ./

                  # (Optional, default: "Dockerfile")
                  # Dockerfile name.
                  dockerfile_name: ./packages/messenger-demo/Dockerfile
                  # (Optional, default: "web")
                  # Select the process type for which you want the docker container to be uploaded.
                  # By default, this argument is set to "web".
                  # For more information look at https://devcenter.heroku.com/articles/process-model
                  process_type: web
