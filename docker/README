# Docker build process

We are building multiple images in this project - some of them are used only in the build process, some of them are published.

## Build process

1. `DockerfileBuild` - This builds the build image. It contains all the necessary tools to build the project. We copy the whole monorepo into this image, build and extract the libraries, and do some other tasks to prepare for extraction of our main packages in the next step.
2. `DockerfileBase` - This builds the base image for all published images. It contains some convenience tools to make our life easier. We copy the libraries from the build image into this one, because our packages all need some of them.
3. `DockerfilePackage` - This dockerfile makes use of the `build` and `base` images. It takes the `base` image, and copies one package and all libraries from the `build` image into it. Then, it does some magic and builds the package. This is done for each package we want to publish.

Therefore, the `build` and `base` images are used only in the build process and are not published. Also, they need to be created before the `package` images. And changes to one of the Dockerfiles might affect the others.

# SSL / HTTPS

We use Nginx for all connections to the outside world. It is configured to use SSL for external connections and to upgrade all unsecure connections to secure ones.
The SSL certificates are generated by Certbot, a docker image using Let's Encrypt. The certificates are stored in a volume that is shared between the Certbot and Nginx containers. Certbot also controls what is presented at the `/.well-known` path, so that Let's Encrypt can verify the domain ownership.

## Initial certificate generation

If the certificates are not present, nginx will crash. But nginx is required to present the acme challenge to Let's Encrypt in order to generate certificates. So that is a bit of a chicken and egg problem.
To get things going, temporarily delete the ssl-section from nginx.conf, which looks like this:

```
    server {
        listen 443 ssl;
        [...]
    }
```

Then do a `docker-compose down` and `docker compose --env-file .env up` to start the nginx without SSL. This is secure because nginx will not accept connections except for the acme challenge.
The certbot will do its thing and generate the certificates. After that, stop the containers, put the ssl-section back into the nginx.conf and start the containers again.

Some commands that might help with understanding and debugging the SSL setup:

```
# attach to the certbot volume to check if the certificates are there
docker run --rm -i -v=certbot-etc:/tmp/certbot-etc busybox sh

# check certbot logs (they are very helpful)
docker logs certbot
```

## Certificate renewal

On every `docker-compose up`, the certbot will check if the certificates are still valid and renew them if necessary. So if a new version is deployed at least once every 89 days, the certificates will never expire (they are valid for 90 days). In an environment that is less frequently updated, it might be a good idea to set up a cronjob that runs `docker compose --env-file .env up` every 2 months.
