/* eslint-disable no-console */
import { DeliveryServiceProfileKeys } from '@dm3-org/dm3-lib-profile';
import { ethers } from 'ethers';
import { NextFunction, Request, Response } from 'express';
import winston from 'winston';

export function logRequest(req: Request, res: Response, next: NextFunction) {
    winston.loggers.get('default').info({
        method: req.method,
        url: req.url,
        timestamp: new Date().getTime(),
    });
    next();
}

export function logError(
    error: Error,
    req: Request,
    res: Response,
    next: NextFunction,
) {
    console.error({
        method: req.method,
        url: req.url,
        error: error.toString(),
        timestamp: new Date().getTime(),
    });
    next();
}

export function errorHandler(
    err: any,
    req: Request,
    res: Response,
    next: NextFunction,
) {
    res.status(500);
    res.render('error', { error: err });
}

export function readKeysFromEnv(
    env: NodeJS.ProcessEnv,
): DeliveryServiceProfileKeys {
    const readKey = (keyName: string) => {
        const key = env[keyName];
        if (!key) {
            throw Error(`Missing ${keyName} in env`);
        }

        return key;
    };

    return {
        signingKeyPair: {
            publicKey: readKey('SIGNING_PUBLIC_KEY'),
            privateKey: readKey('SIGNING_PRIVATE_KEY'),
        },
        encryptionKeyPair: {
            publicKey: readKey('ENCRYPTION_PUBLIC_KEY'),
            privateKey: readKey('ENCRYPTION_PRIVATE_KEY'),
        },
    };
}

/**
 * The server secret is used to sign jwt. It is generated by hashing the secret signing key.
 * @param env environment containing config values
 * @returns server secret
 */
export function getServerSecret(env: NodeJS.ProcessEnv): string {
    try {
        const keys = readKeysFromEnv(env);
        const secretInput = keys.signingKeyPair.privateKey;
        const secret = ethers.utils.sha256(
            ethers.utils.base64.decode(secretInput),
        );
        if (!secret) {
            throw Error('Failed to load server secret for jwt');
        }

        return secret;
    } catch (e) {
        throw Error('Could not get server secret');
    }
}
